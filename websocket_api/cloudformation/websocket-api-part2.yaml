  # IAM Roles for Lambda Functions
  WebSocketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WebSocketApiPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ConnectionsTable.Arn
                  - !GetAtt JobsTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt ProcessingQueue.Arn
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - 'arn:aws:lambda:*:*:function:aws-cost-forecast-agent'
                  - 'arn:aws:lambda:*:*:function:trusted-advisor-agent-*'

  # Lambda Functions
  ConnectionManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-connection-manager'
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt WebSocketLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: websocket-connection-manager.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          LOG_LEVEL: INFO
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  MessageHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-message-handler'
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt WebSocketLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: websocket-message-handler.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          JOBS_TABLE: !Ref JobsTable
          PROCESSING_QUEUE_URL: !Ref ProcessingQueue
          WEBSOCKET_ENDPOINT: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
          LOG_LEVEL: INFO
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  BackgroundProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-background-processor'
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt WebSocketLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: websocket-background-processor.zip
      Environment:
        Variables:
          JOBS_TABLE: !Ref JobsTable
          WEBSOCKET_ENDPOINT: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
          LOG_LEVEL: INFO
      Timeout: 900  # 15 minutes
      MemorySize: 512
      Tags:
        - Key: Project
          Value: !Ref ProjectName
