AWSTemplateFormatVersion: '2010-09-09'
Description: 'Trusted Advisor Agent - Strands-based cost optimization agent for AWS Trusted Advisor recommendations'

Parameters:
  LambdaS3Bucket:
    Type: String
    Default: 'finops-deployment-packages-062025'
    Description: 'S3 bucket containing the Lambda deployment package'
  
  LambdaS3Key:
    Type: String
    Default: 'trusted_advisor_agent_lambda.zip'
    Description: 'S3 key for the Lambda deployment package'
  
  LambdaTimeout:
    Type: Number
    Default: 300
    MinValue: 30
    MaxValue: 900
    Description: 'Lambda function timeout in seconds'
  
  LambdaMemorySize:
    Type: Number
    Default: 512
    MinValue: 128
    MaxValue: 10240
    Description: 'Lambda function memory size in MB'

Resources:
  # IAM Role for the Lambda function
  TrustedAdvisorAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-TrustedAdvisorAgent-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TrustedAdvisorAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # New TrustedAdvisor API permissions
              - Effect: Allow
                Action:
                  - trustedadvisor:ListRecommendations
                  - trustedadvisor:GetRecommendation
                  - trustedadvisor:GetOrganizationRecommendation
                  - trustedadvisor:ListChecks
                  - trustedadvisor:GetCheck
                  - trustedadvisor:GetCheckResult
                Resource: '*'
              # Legacy Support API permissions (for fallback)
              - Effect: Allow
                Action:
                  - support:DescribeTrustedAdvisorChecks
                  - support:DescribeTrustedAdvisorCheckResult
                  - support:DescribeTrustedAdvisorCheckSummaries
                  - support:RefreshTrustedAdvisorCheck
                Resource: '*'
              # CloudWatch Logs permissions
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'

  # Lambda function
  TrustedAdvisorAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-trusted-advisor-agent'
      Description: 'Strands-based agent for AWS Trusted Advisor cost optimization recommendations'
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt TrustedAdvisorAgentRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          LOG_LEVEL: INFO
      Tags:
        - Key: Project
          Value: FinOpsAgent
        - Key: Component
          Value: TrustedAdvisorAgent
        - Key: Environment
          Value: Production

  # CloudWatch Log Group
  TrustedAdvisorAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${TrustedAdvisorAgentFunction}'
      RetentionInDays: 14

  # Lambda permission for API Gateway (if needed)
  TrustedAdvisorAgentApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TrustedAdvisorAgentFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*'

  # Lambda permission for Bedrock agents
  TrustedAdvisorAgentBedrockPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TrustedAdvisorAgentFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'

Outputs:
  TrustedAdvisorAgentFunctionName:
    Description: 'Name of the Trusted Advisor Agent Lambda function'
    Value: !Ref TrustedAdvisorAgentFunction
    Export:
      Name: !Sub '${AWS::StackName}-TrustedAdvisorAgent-FunctionName'

  TrustedAdvisorAgentFunctionArn:
    Description: 'ARN of the Trusted Advisor Agent Lambda function'
    Value: !GetAtt TrustedAdvisorAgentFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TrustedAdvisorAgent-FunctionArn'

  TrustedAdvisorAgentRoleArn:
    Description: 'ARN of the Trusted Advisor Agent IAM role'
    Value: !GetAtt TrustedAdvisorAgentRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TrustedAdvisorAgent-RoleArn'

  TrustedAdvisorAgentLogGroup:
    Description: 'CloudWatch Log Group for the Trusted Advisor Agent'
    Value: !Ref TrustedAdvisorAgentLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-TrustedAdvisorAgent-LogGroup'
