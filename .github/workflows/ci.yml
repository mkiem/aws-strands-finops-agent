name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check code formatting with black
        run: black --check --diff .
      
      - name: Check import sorting with isort
        run: isort --check-only --diff .
      
      - name: Test with pytest
        run: |
          # Run tests if they exist
          if [ -d "tests" ] || find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
            pytest -v
          else
            echo "No tests found, skipping test execution"
          fi

  build-agents:
    name: Build Lambda Packages
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      
      - name: Build AWS Cost Forecast Agent
        run: |
          cd aws-cost-forecast-agent
          chmod +x build_lambda_package.sh
          ./build_lambda_package.sh
      
      - name: Build Supervisor Agent
        run: |
          cd supervisor_agent
          chmod +x build_lambda_package.sh
          ./build_lambda_package.sh
      
      - name: Build Trusted Advisor Agent
        run: |
          cd trusted_advisor_agent
          chmod +x build_lambda_package.sh
          ./build_lambda_package.sh
      
      - name: Build Budget Management Agent
        run: |
          cd budget_management_agent
          chmod +x build_lambda_package.sh
          ./build_lambda_package.sh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lambda-packages
          path: |
            */dist/*.zip
          retention-days: 30

  validate-cloudformation:
    name: Validate CloudFormation Templates
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        if: env.AWS_ACCESS_KEY_ID != ''
      
      - name: Validate CloudFormation templates
        run: |
          # Find all CloudFormation templates
          find . -name "*.yaml" -path "*/cloudformation*" -o -name "cloudformation.yaml" | while read template; do
            echo "Validating $template"
            if command -v aws &> /dev/null && [ -n "$AWS_ACCESS_KEY_ID" ]; then
              aws cloudformation validate-template --template-body file://$template
            else
              echo "AWS CLI not configured, skipping validation for $template"
            fi
          done

  build-ui:
    name: Build React UI
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: finops-ui/package-lock.json
      
      - name: Install dependencies
        run: |
          cd finops-ui
          npm ci
      
      - name: Build React app
        run: |
          cd finops-ui
          npm run build
      
      - name: Upload UI build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ui-build
          path: finops-ui/build/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-agents, build-ui]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: lambda-packages
      
      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          echo "This could include deploying to a test environment and running end-to-end tests"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-agents, build-ui, validate-cloudformation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate release notes
        id: release_notes
        run: |
          # Generate release notes from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "notes=Initial release of FinOps Agent" >> $GITHUB_OUTPUT
          else
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            git log $LAST_TAG..HEAD --pretty=format:"- %s" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
