AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete WebSocket API for FinOps Agent - Overcomes 30-second timeout limitation'

Parameters:
  ProjectName:
    Type: String
    Default: finops-websocket
    Description: Name of the project for resource naming
  
  LambdaS3Bucket:
    Type: String
    Default: ${DEPLOYMENT_BUCKET}
    Description: S3 bucket containing Lambda deployment packages

Resources:
  # DynamoDB Tables
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-connections'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-jobs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # SQS Queue for Background Processing
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-processing-queue'
      VisibilityTimeoutSeconds: 360  # 6 minutes
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProcessingDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  ProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-processing-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # IAM Roles for Lambda Functions
  WebSocketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WebSocketApiPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ConnectionsTable.Arn
                  - !GetAtt JobsTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt ProcessingQueue.Arn
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - 'arn:aws:lambda:*:*:function:aws-cost-forecast-agent'
                  - 'arn:aws:lambda:*:*:function:trusted-advisor-agent-*'
  # Lambda Functions
  ConnectionManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-connection-manager'
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt WebSocketLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: websocket-connection-manager.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          LOG_LEVEL: INFO
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  MessageHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-message-handler'
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt WebSocketLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: websocket-message-handler.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          JOBS_TABLE: !Ref JobsTable
          PROCESSING_QUEUE_URL: !Ref ProcessingQueue
          WEBSOCKET_ENDPOINT: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
          LOG_LEVEL: INFO
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  BackgroundProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-background-processor'
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt WebSocketLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: websocket-background-processor.zip
      Environment:
        Variables:
          JOBS_TABLE: !Ref JobsTable
          WEBSOCKET_ENDPOINT: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
          LOG_LEVEL: INFO
      Timeout: 360  # 6 minutes
      MemorySize: 512
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # SQS Event Source Mapping
  BackgroundProcessorEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ProcessingQueue.Arn
      FunctionName: !Ref BackgroundProcessorFunction
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 0

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${ProjectName}-websocket-api'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
      Description: WebSocket API for FinOps Agent with real-time updates
      Tags:
        Project: !Ref ProjectName

  # WebSocket API Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: prod
      Description: Production stage for WebSocket API
      DefaultRouteSettings:
        ThrottlingBurstLimit: 5000
        ThrottlingRateLimit: 2000
      Tags:
        Project: !Ref ProjectName

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${ConnectIntegration}'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${DisconnectIntegration}'

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub 'integrations/${DefaultIntegration}'

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionManagerFunction.Arn}/invocations'

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionManagerFunction.Arn}/invocations'

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageHandlerFunction.Arn}/invocations'

  # Lambda Permissions for API Gateway
  ConnectLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionManagerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  DisconnectLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionManagerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  DefaultLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

Outputs:
  WebSocketApiId:
    Description: WebSocket API ID
    Value: !Ref WebSocketApi
    Export:
      Name: !Sub '${ProjectName}-websocket-api-id'

  WebSocketApiEndpoint:
    Description: WebSocket API endpoint URL
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${ProjectName}-websocket-endpoint'

  ConnectionsTableName:
    Description: DynamoDB table for WebSocket connections
    Value: !Ref ConnectionsTable
    Export:
      Name: !Sub '${ProjectName}-connections-table'

  JobsTableName:
    Description: DynamoDB table for background jobs
    Value: !Ref JobsTable
    Export:
      Name: !Sub '${ProjectName}-jobs-table'

  ProcessingQueueUrl:
    Description: SQS queue URL for background processing
    Value: !Ref ProcessingQueue
    Export:
      Name: !Sub '${ProjectName}-processing-queue-url'
