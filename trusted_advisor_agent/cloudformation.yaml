AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Trusted Advisor Agent - Intelligent cost optimization recommendations using AWS Trusted Advisor APIs'

Parameters:
  DeploymentBucket:
    Type: String
    Description: S3 bucket name for deployment artifacts
    MinLength: 3
    MaxLength: 63
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: Must be a valid S3 bucket name
    
  AppS3Key:
    Type: String
    Default: trusted-advisor-agent/app.zip
    Description: S3 key for the Lambda application code
    
  DependenciesS3Key:
    Type: String
    Default: trusted-advisor-agent/dependencies.zip
    Description: S3 key for the Lambda dependencies layer
    
  LambdaTimeout:
    Type: Number
    Default: 300
    MinValue: 30
    MaxValue: 900
    Description: Lambda function timeout in seconds (30-900)
    
  LambdaMemorySize:
    Type: Number
    Default: 512
    MinValue: 128
    MaxValue: 10240
    Description: Lambda function memory size in MB (128-10240)
    
  LogRetentionDays:
    Type: Number
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days
    
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
    
  EnableLegacySupport:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable legacy Support API for fallback (requires Business/Enterprise support)

Conditions:
  EnableLegacySupportCondition: !Equals [!Ref EnableLegacySupport, 'true']

Resources:
  # IAM Role for Trusted Advisor Agent Lambda
  TrustedAdvisorAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'finops-trusted-advisor-agent-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TrustedAdvisorAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # New Trusted Advisor API permissions (recommended)
              - Effect: Allow
                Action:
                  - trustedadvisor:ListRecommendations
                  - trustedadvisor:GetRecommendation
                  - trustedadvisor:GetOrganizationRecommendation
                  - trustedadvisor:ListChecks
                  - trustedadvisor:GetCheck
                  - trustedadvisor:GetCheckResult
                  - trustedadvisor:BatchUpdateRecommendationResourceExclusion
                  - trustedadvisor:UpdateRecommendationLifecycle
                Resource: '*'
              # Legacy Support API permissions (conditional)
              - !If
                - EnableLegacySupportCondition
                - Effect: Allow
                  Action:
                    - support:DescribeTrustedAdvisorChecks
                    - support:DescribeTrustedAdvisorCheckResult
                    - support:DescribeTrustedAdvisorCheckSummaries
                    - support:RefreshTrustedAdvisorCheck
                  Resource: '*'
                - !Ref 'AWS::NoValue'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:model/*'
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': 'FinOpsAgent'
      Tags:
        - Key: Project
          Value: FinOpsAgent
        - Key: Component
          Value: TrustedAdvisorAgent
        - Key: Environment
          Value: !Ref Environment

  # Lambda Layer for Dependencies
  TrustedAdvisorAgentDependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'finops-trusted-advisor-agent-deps-${Environment}'
      Description: Dependencies for AWS Trusted Advisor Agent (Strands SDK, boto3)
      Content:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DependenciesS3Key
      CompatibleRuntimes:
        - python3.11
        - python3.12
      CompatibleArchitectures:
        - x86_64
        - arm64

  # Lambda Function
  TrustedAdvisorAgentLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'finops-trusted-advisor-agent-${Environment}'
      Description: AWS Trusted Advisor Agent for intelligent cost optimization recommendations
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt TrustedAdvisorAgentRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref AppS3Key
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Layers:
        - !Ref TrustedAdvisorAgentDependenciesLayer
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          LOG_LEVEL: INFO
          ENVIRONMENT: !Ref Environment
          POWERTOOLS_SERVICE_NAME: trusted-advisor-agent
          POWERTOOLS_METRICS_NAMESPACE: FinOpsAgent
          ENABLE_LEGACY_SUPPORT: !Ref EnableLegacySupport
      ReservedConcurrencyLimit: 10
      DeadLetterQueue:
        TargetArn: !GetAtt TrustedAdvisorAgentDLQ.Arn
      Tags:
        - Key: Project
          Value: FinOpsAgent
        - Key: Component
          Value: TrustedAdvisorAgent
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group
  TrustedAdvisorAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/finops-trusted-advisor-agent-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Project
          Value: FinOpsAgent
        - Key: Component
          Value: TrustedAdvisorAgent
        - Key: Environment
          Value: !Ref Environment

  # Dead Letter Queue for failed invocations
  TrustedAdvisorAgentDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'finops-trusted-advisor-agent-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Project
          Value: FinOpsAgent
        - Key: Component
          Value: TrustedAdvisorAgent
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms
  TrustedAdvisorAgentErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'finops-trusted-advisor-agent-errors-${Environment}'
      AlarmDescription: Monitor errors in Trusted Advisor Agent
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TrustedAdvisorAgentLambda
      TreatMissingData: notBreaching

  TrustedAdvisorAgentDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'finops-trusted-advisor-agent-duration-${Environment}'
      AlarmDescription: Monitor duration of Trusted Advisor Agent
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref LambdaTimeout
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TrustedAdvisorAgentLambda
      TreatMissingData: notBreaching

  # Lambda permissions for invocation
  TrustedAdvisorAgentInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TrustedAdvisorAgentLambda
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:finops-supervisor-agent-*'

Outputs:
  TrustedAdvisorAgentFunctionName:
    Description: Trusted Advisor Agent Lambda Function Name
    Value: !Ref TrustedAdvisorAgentLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'
    
  TrustedAdvisorAgentFunctionArn:
    Description: Trusted Advisor Agent Lambda Function ARN
    Value: !GetAtt TrustedAdvisorAgentLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'
    
  TrustedAdvisorAgentRoleArn:
    Description: Trusted Advisor Agent Lambda Role ARN
    Value: !GetAtt TrustedAdvisorAgentRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRoleArn'
    
  DependenciesLayerArn:
    Description: Trusted Advisor Agent Dependencies Layer ARN
    Value: !Ref TrustedAdvisorAgentDependenciesLayer
    Export:
      Name: !Sub '${AWS::StackName}-DependenciesLayerArn'
      
  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref TrustedAdvisorAgentLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'
